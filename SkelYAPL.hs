-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelYAPL where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsYAPL

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsYAPL.Ident -> Result
transIdent x = case x of
  AbsYAPL.Ident string -> failure x

transProgram :: AbsYAPL.Program -> Result
transProgram x = case x of
  AbsYAPL.Program topdefs -> failure x

transTopDef :: AbsYAPL.TopDef -> Result
transTopDef x = case x of
  AbsYAPL.FnDefNoArg ident block -> failure x
  AbsYAPL.FnDefArg ident args block -> failure x
  AbsYAPL.ExpDef expr -> failure x
  AbsYAPL.Glob items -> failure x

transArg :: AbsYAPL.Arg -> Result
transArg x = case x of
  AbsYAPL.Ar ident -> failure x

transBlock :: AbsYAPL.Block -> Result
transBlock x = case x of
  AbsYAPL.Block stmts -> failure x

transStmt :: AbsYAPL.Stmt -> Result
transStmt x = case x of
  AbsYAPL.Empty -> failure x
  AbsYAPL.BStmt block -> failure x
  AbsYAPL.Decl items -> failure x
  AbsYAPL.Ass ident expr -> failure x
  AbsYAPL.Incr ident -> failure x
  AbsYAPL.Decr ident -> failure x
  AbsYAPL.Ret expr -> failure x
  AbsYAPL.VRet -> failure x
  AbsYAPL.Cond expr stmt -> failure x
  AbsYAPL.CondElse expr stmt1 stmt2 -> failure x
  AbsYAPL.While expr stmt -> failure x
  AbsYAPL.ConstFor ident expr1 expr2 stmt -> failure x
  AbsYAPL.SExp expr -> failure x

transItem :: AbsYAPL.Item -> Result
transItem x = case x of
  AbsYAPL.Init ident expr -> failure x

transType :: AbsYAPL.Type -> Result
transType x = case x of
  AbsYAPL.Int -> failure x
  AbsYAPL.Str -> failure x
  AbsYAPL.Bool -> failure x
  AbsYAPL.Void -> failure x
  AbsYAPL.FuncType -> failure x

transExpr :: AbsYAPL.Expr -> Result
transExpr x = case x of
  AbsYAPL.EVar ident -> failure x
  AbsYAPL.ELitInt integer -> failure x
  AbsYAPL.ELitTrue -> failure x
  AbsYAPL.ELitFalse -> failure x
  AbsYAPL.EApp ident exprs -> failure x
  AbsYAPL.EString string -> failure x
  AbsYAPL.EList -> failure x
  AbsYAPL.Neg expr -> failure x
  AbsYAPL.Not expr -> failure x
  AbsYAPL.EMul expr1 mulop expr2 -> failure x
  AbsYAPL.EAdd expr1 addop expr2 -> failure x
  AbsYAPL.ERel expr1 relop expr2 -> failure x
  AbsYAPL.EAnd expr1 expr2 -> failure x
  AbsYAPL.EOr expr1 expr2 -> failure x

transAddOp :: AbsYAPL.AddOp -> Result
transAddOp x = case x of
  AbsYAPL.Plus -> failure x
  AbsYAPL.Minus -> failure x

transMulOp :: AbsYAPL.MulOp -> Result
transMulOp x = case x of
  AbsYAPL.Times -> failure x
  AbsYAPL.Div -> failure x
  AbsYAPL.Mod -> failure x

transRelOp :: AbsYAPL.RelOp -> Result
transRelOp x = case x of
  AbsYAPL.LTH -> failure x
  AbsYAPL.LE -> failure x
  AbsYAPL.GTH -> failure x
  AbsYAPL.GE -> failure x
  AbsYAPL.EQU -> failure x
  AbsYAPL.NE -> failure x
