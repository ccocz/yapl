-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParYAPL
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsYAPL
import LexYAPL

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '!='     { PT _ (TS _ 2)  }
  '%'      { PT _ (TS _ 3)  }
  '&&'     { PT _ (TS _ 4)  }
  '('      { PT _ (TS _ 5)  }
  ')'      { PT _ (TS _ 6)  }
  '):'     { PT _ (TS _ 7)  }
  '*'      { PT _ (TS _ 8)  }
  '+'      { PT _ (TS _ 9)  }
  '++'     { PT _ (TS _ 10) }
  ','      { PT _ (TS _ 11) }
  '-'      { PT _ (TS _ 12) }
  '--'     { PT _ (TS _ 13) }
  '/'      { PT _ (TS _ 14) }
  ':'      { PT _ (TS _ 15) }
  ';'      { PT _ (TS _ 16) }
  '<'      { PT _ (TS _ 17) }
  '<='     { PT _ (TS _ 18) }
  '='      { PT _ (TS _ 19) }
  '=='     { PT _ (TS _ 20) }
  '>'      { PT _ (TS _ 21) }
  '>='     { PT _ (TS _ 22) }
  '['      { PT _ (TS _ 23) }
  ']'      { PT _ (TS _ 24) }
  'else:'  { PT _ (TS _ 25) }
  'false'  { PT _ (TS _ 26) }
  'for'    { PT _ (TS _ 27) }
  'if'     { PT _ (TS _ 28) }
  'return' { PT _ (TS _ 29) }
  'to'     { PT _ (TS _ 30) }
  'true'   { PT _ (TS _ 31) }
  'while'  { PT _ (TS _ 32) }
  '||'     { PT _ (TS _ 33) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }

%%

Ident :: { AbsYAPL.Ident }
Ident  : L_Ident { AbsYAPL.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsYAPL.Program }
Program : ListTopDef { AbsYAPL.Program $1 }

TopDef :: { AbsYAPL.TopDef }
TopDef
  : Ident ':' Block { AbsYAPL.FnDef $1 $3 }
  | ListItem ';' { AbsYAPL.Glob $1 }

ListTopDef :: { [AbsYAPL.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Block :: { AbsYAPL.Block }
Block : ListStmt { AbsYAPL.Block $1 }

ListStmt :: { [AbsYAPL.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsYAPL.Stmt }
Stmt
  : ';' { AbsYAPL.Empty }
  | Block { AbsYAPL.BStmt $1 }
  | ListItem ';' { AbsYAPL.Decl $1 }
  | Ident '=' Expr ';' { AbsYAPL.Ass $1 $3 }
  | Ident '++' ';' { AbsYAPL.Incr $1 }
  | Ident '--' ';' { AbsYAPL.Decr $1 }
  | 'return' Expr ';' { AbsYAPL.Ret $2 }
  | 'return' ';' { AbsYAPL.VRet }
  | 'if' '(' Expr '):' Stmt { AbsYAPL.Cond $3 $5 }
  | 'if' '(' Expr '):' Stmt 'else:' Stmt { AbsYAPL.CondElse $3 $5 $7 }
  | 'while' '(' Expr '):' Stmt { AbsYAPL.While $3 $5 }
  | 'for' '(' Ident '=' Expr 'to' Expr '):' Stmt { AbsYAPL.ConstFor $3 $5 $7 $9 }
  | Expr ';' { AbsYAPL.SExp $1 }

Item :: { AbsYAPL.Item }
Item : Ident '=' Expr { AbsYAPL.Init $1 $3 }

ListItem :: { [AbsYAPL.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

Expr6 :: { AbsYAPL.Expr }
Expr6
  : Ident { AbsYAPL.EVar $1 }
  | Integer { AbsYAPL.ELitInt $1 }
  | 'true' { AbsYAPL.ELitTrue }
  | 'false' { AbsYAPL.ELitFalse }
  | Ident '(' ListExpr ')' { AbsYAPL.EApp $1 $3 }
  | String { AbsYAPL.EString $1 }
  | '[' ']' { AbsYAPL.EList }
  | '(' Expr ')' { $2 }

Expr5 :: { AbsYAPL.Expr }
Expr5
  : '-' Expr6 { AbsYAPL.Neg $2 }
  | '!' Expr6 { AbsYAPL.Not $2 }
  | Expr6 { $1 }

Expr4 :: { AbsYAPL.Expr }
Expr4 : Expr4 MulOp Expr5 { AbsYAPL.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsYAPL.Expr }
Expr3 : Expr3 AddOp Expr4 { AbsYAPL.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsYAPL.Expr }
Expr2 : Expr2 RelOp Expr3 { AbsYAPL.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsYAPL.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsYAPL.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsYAPL.Expr }
Expr : Expr1 '||' Expr { AbsYAPL.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [AbsYAPL.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsYAPL.AddOp }
AddOp : '+' { AbsYAPL.Plus } | '-' { AbsYAPL.Minus }

MulOp :: { AbsYAPL.MulOp }
MulOp
  : '*' { AbsYAPL.Times } | '/' { AbsYAPL.Div } | '%' { AbsYAPL.Mod }

RelOp :: { AbsYAPL.RelOp }
RelOp
  : '<' { AbsYAPL.LTH }
  | '<=' { AbsYAPL.LE }
  | '>' { AbsYAPL.GTH }
  | '>=' { AbsYAPL.GE }
  | '==' { AbsYAPL.EQU }
  | '!=' { AbsYAPL.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

